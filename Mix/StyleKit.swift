//
//  StyleKit.swift
//  Mix
//
//  Created by Wouter on 29/12/2016.
//  Copyright Â© 2016 Flow Showcontrol. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//
//  This code was generated by Trial version of PaintCode, therefore cannot be used for commercial purposes.
//



import Cocoa

public class StyleKit : NSObject {

    //// Drawing Methods

    public dynamic class func drawButton(frame targetFrame: NSRect = NSRect(x: 0, y: 0, width: 202, height: 35), resizing: ResizingBehavior = .aspectFit, title: String = "New Title", pressed: Bool = false) {
        //// General Declarations
        let context = NSGraphicsContext.current()!.cgContext
        
        //// Resize to Target Frame
        NSGraphicsContext.saveGraphicsState()
        let resizedFrame: NSRect = resizing.apply(rect: NSRect(x: 0, y: 0, width: 202, height: 35), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 202, y: resizedFrame.height / 35)


        //// Color Declarations
        let gradientColor = NSColor(calibratedRed: 0.259, green: 0.259, blue: 0.259, alpha: 1)
        let gradientColor2 = NSColor(calibratedRed: 0.235, green: 0.235, blue: 0.235, alpha: 1)
        let color2 = NSColor(calibratedRed: 0.941, green: 0.941, blue: 0.941, alpha: 1)
        let gradient2Color = NSColor(calibratedRed: 0.498, green: 0.498, blue: 0.498, alpha: 1)
        let gradient2Color2 = NSColor(calibratedRed: 0.392, green: 0.392, blue: 0.392, alpha: 1)

        //// Gradient Declarations
        let gradient = NSGradient(starting: gradientColor, ending: gradientColor2)!
        let gradient2 = NSGradient(starting: gradient2Color, ending: gradient2Color2)!

        //// Background Drawing
        let backgroundPath = NSBezierPath(roundedRect: NSRect(x: 1, y: 1, width: 200, height: 32), xRadius: 5, yRadius: 5)
        gradient2.draw(in: backgroundPath, angle: -90)
        NSColor.black.setStroke()
        backgroundPath.lineWidth = 1.5
        backgroundPath.stroke()


        //// Main Gradient Drawing
        NSGraphicsContext.saveGraphicsState()
        context.translateBy(x: 3.99, y: 2)

        let mainGradientPath = NSBezierPath(roundedRect: NSRect(x: -0.99, y: 1, width: 196, height: 28), xRadius: 5, yRadius: 5)
        gradient.draw(in: mainGradientPath, angle: -90)

        NSGraphicsContext.restoreGraphicsState()


        //// Text Drawing
        let textRect = NSRect(x: 1, y: 1, width: 198, height: 32)
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [NSFontAttributeName: NSFont.systemFont(ofSize: 23), NSForegroundColorAttributeName: color2, NSParagraphStyleAttributeName: textStyle]

        let textTextHeight: CGFloat = title.boundingRect(with: NSSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes).height
        let textTextRect: NSRect = NSRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight)
        NSGraphicsContext.saveGraphicsState()
        NSRectClip(textRect)
        title.draw(in: textTextRect.offsetBy(dx: 0, dy: 1), withAttributes: textFontAttributes)
        NSGraphicsContext.restoreGraphicsState()


        if (pressed) {
            //// Overlay Drawing
            NSGraphicsContext.saveGraphicsState()
            context.setAlpha(0.2)

            let overlayPath = NSBezierPath(roundedRect: NSRect(x: 65.5, y: 60.5, width: 50, height: 19), xRadius: 3, yRadius: 3)
            NSColor.black.setFill()
            overlayPath.fill()

            NSGraphicsContext.restoreGraphicsState()
        }
        
        NSGraphicsContext.restoreGraphicsState()

    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: NSRect, target: NSRect) -> NSRect {
            if rect == target || target == NSRect.zero {
                return rect
            }

            var scales = NSSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
